#!/bin/sh
# shellcheck disable=SC3043
# repo - Deal with git repos

if [ -z "$REPO_HOME" ]; then
  REPO_HOME="${XDG_CACHE_HOME:-$HOME/.cache}/repos"
fi

repo_help() {
  echo "repo - Deal with git repos"
  echo ""
  echo "commands:"
  echo "  help   print this help"
  echo "  home   print repo home"
  echo "  ls     print repo list"
  echo "  rm     remove repo"
  echo "  in     install repo"
  echo "  up     update repos"
  echo ""
  echo "examples:"
  echo "  repo in <repos.txt"
}

repo_update() {
  local repodir oldsha newsha
  repodir="$REPO_HOME/$1"
  oldsha=$(git -C "$repodir" rev-parse --short HEAD 2>/dev/null)
  git -C "$repodir" pull --quiet --ff --depth 1 --rebase --autostash
  newsha=$(git -C "$repodir" rev-parse --short HEAD 2>/dev/null)
  if [ "$oldsha" != "$newsha" ]; then
    echo "Repo updated: $1 ($oldsha->$newsha)"
  fi
}

repo_clone() {
  local repo repodir init file
  repo="$1"
  repodir="$REPO_HOME/$repo"
  if [ -d "$repodir" ]; then
    echo "Found $repo..."
    return
  fi
  echo "Cloning $repo..."
  git clone --quiet --depth 1 --recursive --shallow-submodules \
    "https://github.com/$repo" "$repodir"
  init="$repodir/$(basename "$repo").plugin.zsh"
  if [ ! -e "$init" ]; then
    find "$repodir" -maxdepth 1 -type f \( -name '*.plugin.zsh' -o -name '*.zsh-theme' -o -name '*.zsh' -o -name '*.sh' \) 2>/dev/null | while IFS= read -r file; do
      ln -sf "$file" "$init"
      break
    done
  fi
  if [ "$repo" = "sorin-ionescu/prezto" ]; then
    for init in "$repodir"/modules/*/init.zsh; do
      ln -sf "$init" "$(dirname "$init")/$(basename "$(dirname "$init")").plugin.zsh"
    done
  fi
  echo "Cloned $repo."
}

repo_main() {
  local cmd err output repo repo_path parent_path data
  if [ "$#" -eq 0 ]; then
    repo_help
    return 1
  fi
  cmd="$1"; shift
  # piped/redirected input
  if [ ! -t 0 ]; then
    while IFS= read -r data || [ -n "$data" ]; do
      data="${data%%#*}"
      [ -n "$data" ] && set -- "$@" "$data"
    done
  fi
  case "$cmd" in
    help|-h|--help)
      repo_help
      ;;
    home)
      echo "$REPO_HOME"
      ;;
    ls|list)
      err=1
      output="$(find "$REPO_HOME" -type d -name .git 2>/dev/null)"
      if [ -n "$output" ]; then
        err=0
        for repo in $output; do
          repo_path="$(dirname "$repo")"
          parent_path="$(dirname "$repo_path")"
          echo "$(basename "$parent_path")/$(basename "$repo_path")"
        done
      fi
      return $err
      ;;
    up|update)
      echo "Checking for updates..."
      for repo in $(repo_main ls); do
        echo "$repo..."
        repo_update "$repo" &
      done
      wait
      echo "Updates complete."
      ;;
    in|install)
      for repo in "$@"; do
        repo_clone "$repo" &
      done
      wait
      ;;
    rm|del)
      err=0
      for repo in "$@"; do
        case "$REPO_HOME" in
          "$HOME"/*) ;;
          *)
            echo "repo: \$REPO_HOME not set correctly '$REPO_HOME'." >&2
            return 2
            ;;
        esac
        if [ ! -d "$REPO_HOME/$repo" ]; then
          echo "Repo not found '$repo'."
          err=1
        else
          rm -rf -- "${REPO_HOME:?}/$repo"
        fi
      done
      return $err
      ;;
    *)
      echo "repo: Unknown command '$cmd'" >&2
      return 1
      ;;
  esac
}
repo_main "$@"
